generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model blogs {
  pkblog        Int             @id @default(autoincrement())
  title         String
  summary       String?
  content       String?
  created_on    DateTime?       @default(now())
  fk_user_blog  Int
  users         users           @relation(fields: [fk_user_blog], references: [pkuser])
  comment_blogs comment_blogs[]
  liked_blogs   liked_blogs[]
  saved_blogs   saved_blogs[]
}

model itineraries {
  pkitinerary       Int                 @id @default(autoincrement())
  title             String
  summary           String?
  created_on        DateTime?           @default(now())
  saved_itineraries saved_itineraries[]
  user_itineraries  user_itineraries[]
}

model locations {
  pklocation             Int         @id @default(autoincrement())
  lat                    Float?
  lng                    Float?
  fk_experience_location Int         @unique
  experiences            experiences @relation(fields: [fk_experience_location], references: [pkexperience])
}

model users {
  pkuser                                    Int                   @id @default(autoincrement())
  email                                     String                @unique
  username                                  String                @unique
  password                                  String
  firstname                                 String
  lastname                                  String
  bio                                       String?
  created_on                                DateTime              @default(now())
  blogs                                     blogs[]
  comment_blogs                             comment_blogs[]
  experiences                               experiences[]
  followers_followers_user_followedTousers  followers[]           @relation("followers_user_followedTousers")
  followers_followers_user_followingTousers followers[]           @relation("followers_user_followingTousers")
  images                                    images[]
  liked_blogs                               liked_blogs[]
  review_experiences                        review_experiences[]
  saved_blogs                               saved_blogs[]
  saved_experiences                         saved_experiences[]
  saved_itineraries                         saved_itineraries[]
  user_itineraries                          user_itineraries[]
  visited_experiences                       visited_experiences[]
}

model followers {
  pkfollower                            Int       @id @default(autoincrement())
  user_following                        Int
  user_followed                         Int
  created_on                            DateTime? @default(now())
  users_followers_user_followedTousers  users     @relation("followers_user_followedTousers", fields: [user_followed], references: [pkuser])
  users_followers_user_followingTousers users     @relation("followers_user_followingTousers", fields: [user_following], references: [pkuser])
}

model user_itineraries {
  pkuser_itinerary Int         @id @default(autoincrement())
  created_on       DateTime?   @default(now())
  adding_user      Int
  adding_itinerary Int
  itineraries      itineraries @relation(fields: [adding_itinerary], references: [pkitinerary])
  users            users       @relation(fields: [adding_user], references: [pkuser])
}

model images {
  pkimage           Int                 @id @default(autoincrement())
  identifier        String              @unique
  url               String              @unique
  caption           String?
  created_on        DateTime?           @default(now())
  fk_user_image     Int
  users             users               @relation(fields: [fk_user_image], references: [pkuser])
  experience_images experience_images[]
}

model saved_blogs {
  pksaved_blog Int       @id @default(autoincrement())
  created_on   DateTime? @default(now())
  saving_user  Int
  saving_blog  Int
  blogs        blogs     @relation(fields: [saving_blog], references: [pkblog])
  users        users     @relation(fields: [saving_user], references: [pkuser])
}

model saved_itineraries {
  pksaved_itinerary Int         @id @default(autoincrement())
  created_on        DateTime?   @default(now())
  saving_user       Int
  saving_itinerary  Int
  itineraries       itineraries @relation(fields: [saving_itinerary], references: [pkitinerary])
  users             users       @relation(fields: [saving_user], references: [pkuser])
}

model liked_blogs {
  pkliked_blog Int       @id @default(autoincrement())
  created_on   DateTime? @default(now())
  liking_user  Int
  liking_blog  Int
  blogs        blogs     @relation(fields: [liking_blog], references: [pkblog])
  users        users     @relation(fields: [liking_user], references: [pkuser])
}

model comment_blogs {
  pkcomment_blog Int       @id @default(autoincrement())
  comment        String?
  created_on     DateTime? @default(now())
  comment_user   Int
  comment_blog   Int
  blogs          blogs     @relation(fields: [comment_blog], references: [pkblog])
  users          users     @relation(fields: [comment_user], references: [pkuser])
}

model experience_images {
  pkexperience_image Int         @id @default(autoincrement())
  adding_experience  Int
  adding_image       Int
  experiences        experiences @relation(fields: [adding_experience], references: [pkexperience])
  images             images      @relation(fields: [adding_image], references: [pkimage])
}

model experiences {
  pkexperience        Int                   @id @default(autoincrement())
  title               String
  summary             String?
  created_on          DateTime?             @default(now())
  fk_user_experience  Int
  miles               Float?
  elevation           Int?
  climbing            String?
  difficulty          difficulty_level?
  users               users                 @relation(fields: [fk_user_experience], references: [pkuser])
  experience_images   experience_images[]
  locations           locations?
  review_experiences  review_experiences[]
  saved_experiences   saved_experiences[]
  visited_experiences visited_experiences[]
}

model review_experiences {
  pkreview_experience Int         @id @default(autoincrement())
  rating              Int
  content             String?
  created_on          DateTime?   @default(now())
  review_user         Int
  review_experience   Int
  experiences         experiences @relation(fields: [review_experience], references: [pkexperience])
  users               users       @relation(fields: [review_user], references: [pkuser])
}

model saved_experiences {
  pksaved_experience Int         @id @default(autoincrement())
  created_on         DateTime?   @default(now())
  saving_user        Int
  saving_experience  Int
  experiences        experiences @relation(fields: [saving_experience], references: [pkexperience])
  users              users       @relation(fields: [saving_user], references: [pkuser])
}

model visited_experiences {
  pkvisited_experience Int         @id @default(autoincrement())
  created_on           DateTime?   @default(now())
  visiting_user        Int
  visiting_experience  Int
  experiences          experiences @relation(fields: [visiting_experience], references: [pkexperience])
  users                users       @relation(fields: [visiting_user], references: [pkuser])
}

enum difficulty_level {
  EASY
  MODERATE
  HARD
}
