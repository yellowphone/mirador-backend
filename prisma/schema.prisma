generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model adventures {
  pkadventure        Int                  @id @default(autoincrement())
  title              String
  summary            String?
  created_on         DateTime?            @default(now())
  fk_user_adventure  Int
  miles              Float?
  elevation          Int?
  climbing           String?
  difficulty         difficulty_level?
  users              users                @relation(fields: [fk_user_adventure], references: [pkuser])
  adventure_images   adventure_images[]
  locations          locations?
  saved_adventures   saved_adventures[]
  visited_adventures visited_adventures[]
}

model blogs {
  pkblog       Int       @id @default(autoincrement())
  title        String
  summary      String?
  created_on   DateTime? @default(now())
  fk_user_blog Int
  users        users     @relation(fields: [fk_user_blog], references: [pkuser])
}

model itineraries {
  pkitinerary      Int                @id @default(autoincrement())
  title            String
  summary          String?
  created_on       DateTime?          @default(now())
  user_itineraries user_itineraries[]
}

model locations {
  pklocation            Int        @id @default(autoincrement())
  lat                   Float?
  lng                   Float?
  fk_adventure_location Int        @unique
  adventures            adventures @relation(fields: [fk_adventure_location], references: [pkadventure])
}

model users {
  pkuser                                    Int                  @id @default(autoincrement())
  email                                     String               @unique
  username                                  String               @unique
  password                                  String
  firstname                                 String?
  lastname                                  String?
  bio                                       String?
  created_on                                DateTime?            @default(now())
  adventures                                adventures[]
  blogs                                     blogs[]
  followers_followers_user_followedTousers  followers[]          @relation("followers_user_followedTousers")
  followers_followers_user_followingTousers followers[]          @relation("followers_user_followingTousers")
  images                                    images[]
  saved_adventures                          saved_adventures[]
  user_itineraries                          user_itineraries[]
  visited_adventures                        visited_adventures[]
}

model followers {
  pkfollower                            Int       @id @default(autoincrement())
  user_following                        Int
  user_followed                         Int
  created_on                            DateTime? @default(now())
  users_followers_user_followedTousers  users     @relation("followers_user_followedTousers", fields: [user_followed], references: [pkuser])
  users_followers_user_followingTousers users     @relation("followers_user_followingTousers", fields: [user_following], references: [pkuser])
}

model saved_adventures {
  pksaved_adventure Int        @id @default(autoincrement())
  created_on        DateTime?  @default(now())
  saving_user       Int
  saving_adventure  Int
  adventures        adventures @relation(fields: [saving_adventure], references: [pkadventure])
  users             users      @relation(fields: [saving_user], references: [pkuser])
}

model visited_adventures {
  pkvisited_adventure Int        @id @default(autoincrement())
  created_on          DateTime?  @default(now())
  visiting_user       Int
  visiting_adventure  Int
  adventures          adventures @relation(fields: [visiting_adventure], references: [pkadventure])
  users               users      @relation(fields: [visiting_user], references: [pkuser])
}

model user_itineraries {
  pkuser_itinerary Int         @id @default(autoincrement())
  created_on       DateTime?   @default(now())
  adding_user      Int
  adding_itinerary Int
  itineraries      itineraries @relation(fields: [adding_itinerary], references: [pkitinerary])
  users            users       @relation(fields: [adding_user], references: [pkuser])
}

model adventure_images {
  pkadventure_image Int        @id @default(autoincrement())
  adding_adventure  Int
  adding_image      Int
  adventures        adventures @relation(fields: [adding_adventure], references: [pkadventure])
  images            images     @relation(fields: [adding_image], references: [pkimage])
}

model images {
  pkimage          Int                @id @default(autoincrement())
  identifier       String             @unique
  url              String             @unique
  caption          String?
  created_on       DateTime?          @default(now())
  fk_user_image    Int
  users            users              @relation(fields: [fk_user_image], references: [pkuser])
  adventure_images adventure_images[]
}

enum difficulty_level {
  EASY
  MODERATE
  HARD
}
